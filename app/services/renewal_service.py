from datetime import datetime
from app.repositories import renewal_repository


def create_renewal(data):
    """
    ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ repository
    """
    try:
        rent_id = int(data["rent_id"])
        old_due = datetime.strptime(data["old_due"], "%Y-%m-%d")
        new_due = datetime.strptime(data["new_due"], "%Y-%m-%d")
        reason = data.get("reason")
        created_at = datetime.strptime(data["created_at"], "%Y-%m-%d %H:%M:%S")

        # üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ new_due ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ old_due
        if new_due <= old_due:
            return False, "‡∏ß‡∏±‡∏ô‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏î‡∏¥‡∏°"

        # üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠ pending ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if renewal_repository.is_pending_request_exists(rent_id):
            return False, "‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"

        # üîπ ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ repository ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        renewal_repository.insert_renewal({
            "rent_id": rent_id,
            "old_due": old_due,
            "new_due": new_due,
            "note": reason,
            "created_at": created_at,
        })

        return True, "‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"
    except Exception as e:
        print("‚ùå Error:", e)
        return False, str(e)



# ------------------------------------------------------------------
# ‚úÖ ‡∏Ç‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• renew ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÉ‡∏ä‡πâ repository ‡πÄ‡∏î‡∏¥‡∏°)
# ------------------------------------------------------------------
def get_renewal_summary_service():
    """
    ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ repository ‡πÄ‡∏î‡∏¥‡∏° (get_all_rent_returns_with_renewal)
    ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå, ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°, ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°, ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏Å‡πà‡∏≤, ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡πÉ‡∏´‡∏°‡πà
    """
    try:
        rent_data = renewal_repository.get_all_rent_returns_with_renewal()

        summary = []
        for rent in rent_data:
            # ‡∏°‡∏µ renewals ‡πÑ‡∏´‡∏°?
            if rent.get("renewals"):
                for rn in rent["renewals"]:
                    summary.append({
                        "equipment_name": rent["equipment"]["name"],
                        "borrower_name": rent["user"]["name"],
                        "start_date": rent["start_date"].strftime("%Y-%m-%d %H:%M") if rent["start_date"] else None,
                        "old_due": rn["old_due"].strftime("%Y-%m-%d %H:%M") if rn["old_due"] else None,
                        "new_due": rn["new_due"].strftime("%Y-%m-%d %H:%M") if rn["new_due"] else None,
                    })

        print(f"üì¶ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ Renewal ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(summary)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        return True, summary

    except Exception as e:
        print("‚ùå Error:", e)
        return False, str(e)
